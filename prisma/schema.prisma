generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model apikeyper_tokens {
  id                  Int       @id @default(autoincrement())
  token_name          String    @db.VarChar(30)
  token_description   String    @db.VarChar(30)
  token_value         String
  token_created_date  DateTime? @db.Date
  token_expiry_date   DateTime? @db.Date
  notification_option String?   @db.VarChar(30)
  created_at          DateTime? @default(now()) @db.Timestamp(6)
  user_id             String    @db.VarChar(255)
}

model apikeyper_users {
  id            Int      @id @default(autoincrement())
  username      String   @db.VarChar(30)
  email         String
  password      String
  refresh_token String?
  is_verified   Boolean? @default(false)
  device_token  String?
}

model bokdeokbang_blogs {
  id         Int                      @id @default(autoincrement())
  name       String                   @db.VarChar(255)
  subdomain  String                   @unique @db.VarChar(255)
  ownerId    Int?                     @map("owner_id")
  createdAt  DateTime?                @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt  DateTime?                @default(now()) @map("updated_at") @db.Timestamp(6)
  categories bokdeokbang_categories[]
  posts      bokdeokbang_posts[]
}

model bokdeokbang_categories {
  id        Int                 @id @default(autoincrement())
  blogId    Int?                @map("blog_id")
  name      String              @db.VarChar(255)
  createdAt DateTime?           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime?           @default(now()) @map("updated_at") @db.Timestamp(6)
  blogs     bokdeokbang_blogs?  @relation(fields: [blogId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  posts     bokdeokbang_posts[]
}

model bokdeokbang_posts {
  id         Int                     @id @default(autoincrement())
  blogId     Int                     @map("blog_id")
  title      String                  @db.VarChar(255)
  content    String
  authorId   Int?                    @map("author_id")
  categoryId Int?                    @map("category_id")
  createdAt  DateTime?               @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt  DateTime?               @default(now()) @map("updated_at") @db.Timestamp(6)
  users      bokdeokbang_users?      @relation(fields: [authorId], references: [id], onUpdate: NoAction)
  blogs      bokdeokbang_blogs       @relation(fields: [blogId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  categories bokdeokbang_categories? @relation(fields: [categoryId], references: [id], onUpdate: NoAction)
}

model bokdeokbang_users {
  id        Int                 @id @default(autoincrement())
  email     String              @unique @db.VarChar(255)
  password  String              @db.VarChar(255)
  createdAt DateTime?           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime?           @default(now()) @map("updated_at") @db.Timestamp(6)
  posts     bokdeokbang_posts[]
}
